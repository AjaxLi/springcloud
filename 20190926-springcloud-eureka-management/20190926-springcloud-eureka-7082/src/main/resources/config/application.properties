server.port=7082
server.servlet.context-path=/

# eureka服务器端的实例名称(！！是唯一的！！)
# 相当于给eureka起了一个名字(不能随便起)
# hostname-->其实就是本台服务器的域名，如果不配置则是localhost
# vim /etc/sysconfig/network-->HOSTNAME mysql01....-->如果不配置则直接显示localhost
#eureka.instance.hostname=localhost
eureka.instance.hostname=eureka02
# eureka默认也会把自己注册到注册中心里，这里因为最终eureka是不需要被consumer所发现的，所以不再需要把自己注册里面,eureka自己就是注册中心
# 它是对整个服务的管理起作用，并不是一个服务提供者，所以不应该把自己注册到注册中心里
# 默认值为true，需要把默认值改成false
eureka.client.register-with-eureka=false
# eureka的职责是维护服务的实例，表明自己就是注册中心，并不需要从注册中心里发现自己
# 默认值为true，需要手动改为false
eureka.client.fetch-registry=false
# 注册中心的URL路径
# zookeeper需要在linux服务器上进行配置，最终的情况下使用zookeeper的时候必须要指向zookeeper的IP地址
# eureka不需要做任何服务器配置，但是也必须要指向地址(直接指向eureka的项目即可:http://localhost:7081/eureka)
# 该地址中的localhost就是eureka.instance.hostname的值，端口号就是server.port的值，/eureka:固定的(eureka自己提供)
# defaultZone:eureka默认所提供的命名空间
# 在eureka的注册地址中，是可以分空间(zone)的，是命名空间，根据空间的不同来配置不同集群的eureka来实现不同的作用
# eureka不需要linux服务器，但是eureka怎么知道自己和其他的服务器是一个集群呢？
# eg:电商项目
# order项目-->服务的提供者和服务的消费者
# cart项目-->服务的提供者和服务的消费者
# item项目-->服务的提供者和服务的消费者
# manager项目-->服务的提供者和服务的消费者
# userInfo项目-->服务的提供者和服务的消费者
# 就可以根据类别进行配置eureka
# eureka01和eureka02的命名空间就是:order
# eureka03和eureka04的命名空间就是:cart
# 为了提供整个项目的安全性和可维护性
# 如果为单节点可以随意配置，但是如果为集群则目前为止必须要配置成defaultZone(因为如果是集群版就必须先要声明命名空间，如果不声明则无法使用)
#eureka.client.service-url.defaultZone=http://localhost:7081/eureka
eureka.client.service-url.defaultZone=http://eureka01:7081/eureka,http://eureka03:7083/eureka

# 关闭eureka的自我保护机制
#eureka.server.enable-self-preservation=false

# eureka自己检测服务的心跳时间(90秒)
# 单位是毫秒，先把eureka检测心跳的时间缩短为10秒
# 也就是说每个10秒就会检测一次服务的心跳
#eureka.server.eviction-interval-timer-in-ms=10000